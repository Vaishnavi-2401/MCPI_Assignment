
assignment06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800077c  0800077c  0000177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000794  08000794  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000794  08000794  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000794  08000794  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000794  08000794  00001794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000798  08000798  00001798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800079c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001027  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005bb  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000cf  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001901d  00000000  00000000  00003817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001603  00000000  00000000  0001c834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b986  00000000  00000000  0001de37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a97bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000344  00000000  00000000  000a9800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  000a9b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000764 	.word	0x08000764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000764 	.word	0x08000764

080001c8 <I2C_Init>:
 */

#include "i2c.h"

void I2C_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001cc:	4b29      	ldr	r3, [pc, #164]	@ (8000274 <I2C_Init+0xac>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <I2C_Init+0xac>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 80001d8:	4b27      	ldr	r3, [pc, #156]	@ (8000278 <I2C_Init+0xb0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a26      	ldr	r2, [pc, #152]	@ (8000278 <I2C_Init+0xb0>)
 80001de:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <I2C_Init+0xb0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a23      	ldr	r2, [pc, #140]	@ (8000278 <I2C_Init+0xb0>)
 80001ea:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80001ee:	6013      	str	r3, [r2, #0]

	GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2));
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <I2C_Init+0xb0>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <I2C_Init+0xb0>)
 80001f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80001fa:	60d3      	str	r3, [r2, #12]

	GPIOB->AFR[0] |= BV(30) | BV(26);
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <I2C_Init+0xb0>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <I2C_Init+0xb0>)
 8000202:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000206:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <I2C_Init+0xac>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800020c:	4a19      	ldr	r2, [pc, #100]	@ (8000274 <I2C_Init+0xac>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000212:	6413      	str	r3, [r2, #64]	@ 0x40

	I2C1->CR1 = I2C_CR1_SWRST;
 8000214:	4b19      	ldr	r3, [pc, #100]	@ (800027c <I2C_Init+0xb4>)
 8000216:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800021a:	601a      	str	r2, [r3, #0]
	I2C1->CR1 = 0;
 800021c:	4b17      	ldr	r3, [pc, #92]	@ (800027c <I2C_Init+0xb4>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]

	I2C1->CR2 |= 16;
 8000222:	4b16      	ldr	r3, [pc, #88]	@ (800027c <I2C_Init+0xb4>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a15      	ldr	r2, [pc, #84]	@ (800027c <I2C_Init+0xb4>)
 8000228:	f043 0310 	orr.w	r3, r3, #16
 800022c:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~I2C_CCR_FS;
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <I2C_Init+0xb4>)
 8000230:	69db      	ldr	r3, [r3, #28]
 8000232:	4a12      	ldr	r2, [pc, #72]	@ (800027c <I2C_Init+0xb4>)
 8000234:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000238:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 80;
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <I2C_Init+0xb4>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <I2C_Init+0xb4>)
 8000240:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000244:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE |= 17;
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <I2C_Init+0xb4>)
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <I2C_Init+0xb4>)
 800024c:	f043 0311 	orr.w	r3, r3, #17
 8000250:	6213      	str	r3, [r2, #32]

	I2C1->CR1 |= I2C_CR1_ACK;
 8000252:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <I2C_Init+0xb4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a09      	ldr	r2, [pc, #36]	@ (800027c <I2C_Init+0xb4>)
 8000258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025c:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_PE;
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <I2C_Init+0xb4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a06      	ldr	r2, [pc, #24]	@ (800027c <I2C_Init+0xb4>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]


}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400
 800027c:	40005400 	.word	0x40005400

08000280 <I2C_Start>:
void I2C_Start(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_START;
 8000284:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <I2C_Start+0x2c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a08      	ldr	r2, [pc, #32]	@ (80002ac <I2C_Start+0x2c>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR1 & I2C_SR1_SB));
 8000290:	bf00      	nop
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <I2C_Start+0x2c>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <I2C_Start+0x12>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40005400 	.word	0x40005400

080002b0 <I2C_Stop>:
{
	I2C_Start();

}
void I2C_Stop(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_STOP;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <I2C_Stop+0x2c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <I2C_Stop+0x2c>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002be:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR1 & I2C_SR2_BUSY));
 80002c0:	bf00      	nop
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <I2C_Stop+0x2c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <I2C_Stop+0x12>

}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40005400 	.word	0x40005400

080002e0 <I2C_SendSlaveAddr>:
void I2C_SendSlaveAddr(uint8_t slaveAddr)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = slaveAddr;
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <I2C_SendSlaveAddr+0x34>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80002f0:	bf00      	nop
 80002f2:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <I2C_SendSlaveAddr+0x34>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 0302 	and.w	r3, r3, #2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <I2C_SendSlaveAddr+0x12>

	(void)I2C1->SR1;
 80002fe:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <I2C_SendSlaveAddr+0x34>)
 8000300:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000302:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <I2C_SendSlaveAddr+0x34>)
 8000304:	699b      	ldr	r3, [r3, #24]

}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40005400 	.word	0x40005400

08000318 <I2C_SendData>:
void I2C_SendData(uint8_t data)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	  while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000322:	bf00      	nop
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <I2C_SendData+0x3c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <I2C_SendData+0xc>

	I2C1->DR = data;
 8000330:	4a08      	ldr	r2, [pc, #32]	@ (8000354 <I2C_SendData+0x3c>)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000336:	bf00      	nop
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <I2C_SendData+0x3c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <I2C_SendData+0x20>
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40005400 	.word	0x40005400

08000358 <I2C_IsDeviceReady>:
	uint16_t val = I2C1->DR;
	return val;

}
int I2C_IsDeviceReady(uint8_t slaveaddr)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = slaveaddr;
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <I2C_IsDeviceReady+0x34>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000368:	bf00      	nop
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <I2C_IsDeviceReady+0x34>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C_IsDeviceReady+0x12>

	(void)I2C1->SR1;
 8000376:	4b05      	ldr	r3, [pc, #20]	@ (800038c <I2C_IsDeviceReady+0x34>)
 8000378:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 800037a:	4b04      	ldr	r3, [pc, #16]	@ (800038c <I2C_IsDeviceReady+0x34>)
 800037c:	699b      	ldr	r3, [r3, #24]
	return 1;
 800037e:	2301      	movs	r3, #1

}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40005400 	.word	0x40005400

08000390 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <DelayMs+0x44>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <DelayMs+0x48>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <DelayMs+0x4c>)
 80003a4:	fba2 2303 	umull	r2, r3, r2, r3
 80003a8:	099b      	lsrs	r3, r3, #6
 80003aa:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	fb02 f303 	mul.w	r3, r2, r3
 80003b4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003b6:	bf00      	nop
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <DelayMs+0x44>)
 80003ba:	685a      	ldr	r2, [r3, #4]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	1ad2      	subs	r2, r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f8      	bcc.n	80003b8 <DelayMs+0x28>
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e0001000 	.word	0xe0001000
 80003d8:	20000000 	.word	0x20000000
 80003dc:	10624dd3 	.word	0x10624dd3

080003e0 <Lcd_Write4BitAndCtrl>:
 */

#include "i2c_lcd.h"

void Lcd_Write4BitAndCtrl(uint8_t val)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 80003ea:	f7ff ff49 	bl	8000280 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLAVE_ADDR_W);
 80003ee:	204e      	movs	r0, #78	@ 0x4e
 80003f0:	f7ff ff76 	bl	80002e0 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff8e 	bl	8000318 <I2C_SendData>
	I2C_Stop();
 80003fc:	f7ff ff58 	bl	80002b0 <I2C_Stop>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	460a      	mov	r2, r1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	4613      	mov	r3, r2
 8000416:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b80      	cmp	r3, #128	@ 0x80
 800042a:	bf14      	ite	ne
 800042c:	2301      	movne	r3, #1
 800042e:	2300      	moveq	r3, #0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000434:	7bfa      	ldrb	r2, [r7, #15]
 8000436:	7b7b      	ldrb	r3, [r7, #13]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f043 030c 	orr.w	r3, r3, #12
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ffcc 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ffa1 	bl	8000390 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 800044e:	7bfa      	ldrb	r2, [r7, #15]
 8000450:	7b7b      	ldrb	r3, [r7, #13]
 8000452:	4313      	orrs	r3, r2
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffbf 	bl	80003e0 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000462:	7bba      	ldrb	r2, [r7, #14]
 8000464:	7b7b      	ldrb	r3, [r7, #13]
 8000466:	4313      	orrs	r3, r2
 8000468:	b2db      	uxtb	r3, r3
 800046a:	f043 030c 	orr.w	r3, r3, #12
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffb5 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f7ff ff8a 	bl	8000390 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 800047c:	7bba      	ldrb	r2, [r7, #14]
 800047e:	7b7b      	ldrb	r3, [r7, #13]
 8000480:	4313      	orrs	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffa8 	bl	80003e0 <Lcd_Write4BitAndCtrl>
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <Lcd_Init>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int Lcd_Init() {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 800049e:	2014      	movs	r0, #20
 80004a0:	f7ff ff76 	bl	8000390 <DelayMs>
	I2C_Init();
 80004a4:	f7ff fe90 	bl	80001c8 <I2C_Init>
	// check if lcd is ready
	I2C_Start();
 80004a8:	f7ff feea 	bl	8000280 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLAVE_ADDR_W);
 80004ac:	204e      	movs	r0, #78	@ 0x4e
 80004ae:	f7ff ff53 	bl	8000358 <I2C_IsDeviceReady>
 80004b2:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 80004b4:	f7ff fefc 	bl	80002b0 <I2C_Stop>
	if(!ret)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d101      	bne.n	80004c2 <Lcd_Init+0x2a>
		return 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	e04a      	b.n	8000558 <Lcd_Init+0xc0>

	// attention sequence
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 80004c2:	2034      	movs	r0, #52	@ 0x34
 80004c4:	f7ff ff8c 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80004c8:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 80004ca:	2030      	movs	r0, #48	@ 0x30
 80004cc:	f7ff ff88 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 80004d0:	2005      	movs	r0, #5
 80004d2:	f7ff ff5d 	bl	8000390 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 80004d6:	2034      	movs	r0, #52	@ 0x34
 80004d8:	f7ff ff82 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80004dc:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 80004de:	2030      	movs	r0, #48	@ 0x30
 80004e0:	f7ff ff7e 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff ff53 	bl	8000390 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 80004ea:	2034      	movs	r0, #52	@ 0x34
 80004ec:	f7ff ff78 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80004f0:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 80004f2:	2030      	movs	r0, #48	@ 0x30
 80004f4:	f7ff ff74 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f7ff ff49 	bl	8000390 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT | BV(LCD_EN));
 80004fe:	2024      	movs	r0, #36	@ 0x24
 8000500:	f7ff ff6e 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000504:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT);
 8000506:	2020      	movs	r0, #32
 8000508:	f7ff ff6a 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 800050c:	2003      	movs	r0, #3
 800050e:	f7ff ff3f 	bl	8000390 <DelayMs>


	// lcd initialization
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT_1LINES_);
 8000512:	2020      	movs	r0, #32
 8000514:	f7ff ff64 	bl	80003e0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff39 	bl	8000390 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 800051e:	2108      	movs	r1, #8
 8000520:	2080      	movs	r0, #128	@ 0x80
 8000522:	f7ff ff71 	bl	8000408 <Lcd_WriteByte>
	DelayMs(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f7ff ff32 	bl	8000390 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 800052c:	2101      	movs	r1, #1
 800052e:	2080      	movs	r0, #128	@ 0x80
 8000530:	f7ff ff6a 	bl	8000408 <Lcd_WriteByte>
	DelayMs(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ff2b 	bl	8000390 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 800053a:	2106      	movs	r1, #6
 800053c:	2080      	movs	r0, #128	@ 0x80
 800053e:	f7ff ff63 	bl	8000408 <Lcd_WriteByte>
	DelayMs(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff ff24 	bl	8000390 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 8000548:	210c      	movs	r1, #12
 800054a:	2080      	movs	r0, #128	@ 0x80
 800054c:	f7ff ff5c 	bl	8000408 <Lcd_WriteByte>
	DelayMs(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff ff1d 	bl	8000390 <DelayMs>
//	Lcd_WriteByte(LCD_CMD, LCD_FN_SET_SCROLL);
//	DelayMs(1);
	return ret;
 8000556:	687b      	ldr	r3, [r7, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Lcd_Puts>:

	void Lcd_Puts(uint8_t line, char str[]) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
		int i;
		Lcd_WriteByte(LCD_CMD, line); // line address
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4619      	mov	r1, r3
 8000570:	2080      	movs	r0, #128	@ 0x80
 8000572:	f7ff ff49 	bl	8000408 <Lcd_WriteByte>
		DelayMs(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff0a 	bl	8000390 <DelayMs>
		for(i=0; str[i]!='\0'; i++)
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e00a      	b.n	8000598 <Lcd_Puts+0x38>
			Lcd_WriteByte(LCD_DATA, str[i]);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff ff3b 	bl	8000408 <Lcd_WriteByte>
		for(i=0; str[i]!='\0'; i++)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1ee      	bne.n	8000582 <Lcd_Puts+0x22>
	}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <Lcd_shiftleft>:

	void Lcd_shiftleft(void)
	{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
		Lcd_WriteByte(LCD_CMD, LCD_FN_SET_SCROLL);
 80005b2:	2118      	movs	r1, #24
 80005b4:	2080      	movs	r0, #128	@ 0x80
 80005b6:	f7ff ff27 	bl	8000408 <Lcd_WriteByte>
	}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <DelayMs+0x44>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <DelayMs+0x48>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <DelayMs+0x4c>)
 80005d4:	fba2 2303 	umull	r2, r3, r2, r3
 80005d8:	099b      	lsrs	r3, r3, #6
 80005da:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005e6:	bf00      	nop
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <DelayMs+0x44>)
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3f8      	bcc.n	80005e8 <DelayMs+0x28>
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e0001000 	.word	0xe0001000
 8000608:	20000000 	.word	0x20000000
 800060c:	10624dd3 	.word	0x10624dd3

08000610 <main>:
#endif

#include "i2c_lcd.h"

int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
	int ret, i;
	char str[32];
	SystemInit();
 8000616:	f000 f821 	bl	800065c <SystemInit>
	ret = Lcd_Init();
 800061a:	f7ff ff3d 	bl	8000498 <Lcd_Init>
 800061e:	6238      	str	r0, [r7, #32]
	if(ret) {
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d012      	beq.n	800064c <main+0x3c>
		Lcd_Puts(LCD_LINE1, "Nirali Soni Bagiya..!");
 8000626:	490c      	ldr	r1, [pc, #48]	@ (8000658 <main+0x48>)
 8000628:	2080      	movs	r0, #128	@ 0x80
 800062a:	f7ff ff99 	bl	8000560 <Lcd_Puts>
		for(int i=1; i<=16 ; i++)
 800062e:	2301      	movs	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
 8000632:	e008      	b.n	8000646 <main+0x36>
		{
			Lcd_shiftleft();
 8000634:	f7ff ffbb 	bl	80005ae <Lcd_shiftleft>
			DelayMs(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063c:	f7ff ffc0 	bl	80005c0 <DelayMs>
		for(int i=1; i<=16 ; i++)
 8000640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000642:	3301      	adds	r3, #1
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
 8000646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000648:	2b10      	cmp	r3, #16
 800064a:	ddf3      	ble.n	8000634 <main+0x24>
		}

	}
	return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	0800077c 	.word	0x0800077c

0800065c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000660:	f000 f802 	bl	8000668 <DWT_Init>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <DWT_Init+0x58>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <DWT_Init+0x58>)
 8000672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000676:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <DWT_Init+0x58>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <DWT_Init+0x58>)
 800067e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000682:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <DWT_Init+0x5c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <DWT_Init+0x5c>)
 800068a:	f023 0301 	bic.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <DWT_Init+0x5c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <DWT_Init+0x5c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <DWT_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006a2:	bf00      	nop
    __ASM volatile ("NOP");
 80006a4:	bf00      	nop
    __ASM volatile ("NOP");
 80006a6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <DWT_Init+0x5c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000edf0 	.word	0xe000edf0
 80006c4:	e0001000 	.word	0xe0001000

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f7ff ffc6 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f000 f811 	bl	800071c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff ff89 	bl	8000610 <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800070c:	0800079c 	.word	0x0800079c
  ldr r2, =_sbss
 8000710:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000714:	20000020 	.word	0x20000020

08000718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <__libc_init_array>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	4d0d      	ldr	r5, [pc, #52]	@ (8000754 <__libc_init_array+0x38>)
 8000720:	4c0d      	ldr	r4, [pc, #52]	@ (8000758 <__libc_init_array+0x3c>)
 8000722:	1b64      	subs	r4, r4, r5
 8000724:	10a4      	asrs	r4, r4, #2
 8000726:	2600      	movs	r6, #0
 8000728:	42a6      	cmp	r6, r4
 800072a:	d109      	bne.n	8000740 <__libc_init_array+0x24>
 800072c:	4d0b      	ldr	r5, [pc, #44]	@ (800075c <__libc_init_array+0x40>)
 800072e:	4c0c      	ldr	r4, [pc, #48]	@ (8000760 <__libc_init_array+0x44>)
 8000730:	f000 f818 	bl	8000764 <_init>
 8000734:	1b64      	subs	r4, r4, r5
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	2600      	movs	r6, #0
 800073a:	42a6      	cmp	r6, r4
 800073c:	d105      	bne.n	800074a <__libc_init_array+0x2e>
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f855 3b04 	ldr.w	r3, [r5], #4
 8000744:	4798      	blx	r3
 8000746:	3601      	adds	r6, #1
 8000748:	e7ee      	b.n	8000728 <__libc_init_array+0xc>
 800074a:	f855 3b04 	ldr.w	r3, [r5], #4
 800074e:	4798      	blx	r3
 8000750:	3601      	adds	r6, #1
 8000752:	e7f2      	b.n	800073a <__libc_init_array+0x1e>
 8000754:	08000794 	.word	0x08000794
 8000758:	08000794 	.word	0x08000794
 800075c:	08000794 	.word	0x08000794
 8000760:	08000798 	.word	0x08000798

08000764 <_init>:
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000766:	bf00      	nop
 8000768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076a:	bc08      	pop	{r3}
 800076c:	469e      	mov	lr, r3
 800076e:	4770      	bx	lr

08000770 <_fini>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	bf00      	nop
 8000774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000776:	bc08      	pop	{r3}
 8000778:	469e      	mov	lr, r3
 800077a:	4770      	bx	lr
